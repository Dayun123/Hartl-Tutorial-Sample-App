In Chapter 3, we begin making the sample app by making static pages in our rails app.

******************** 3.1: Sample App Setup ************************ #

To start a new rails project, and make sure it conforms to the same version of rails as the tutorial, we enter this command:

`rails _5.1.4_ new sample_app`

Once the application has been created, we edit the Gemfile to match up with the tutorial and then run:

`bundle install --without production`
***NOTE*** I get an error message and have to run bundle update, which has the same effect.

The --without production flag ensures that we don't download the gems in the production group, which at this point comprises the gem for setting up the PostgreSQL database, which we will not be using for development but will be using for production. Later on, I should learn how to setup PostgreSQL on my development machine so that the development box matches the remote box.

Newer versions of rails automatically make the new project a git repository, so make sure to commit often and push up to a remote repo.

Having a good README file should be part of every project, for this app one is provided with the tutorial.

Even though there is nothing to the project at this point, it is a good idea to also deploy to Heroku as often as possible, so setup a simple "Hello, World" in the application controller and point the root route to it and then create and deploy to heroku. Make sure to visit the site locally and on the web to ensure everything is working correctly.

# create the project in heroku
`heroku create`

# push to herkou
`git push heroku master`

# open the page in a browser
`heroku open`

If you have a problem reaching pages on the site locally, you can always check the locally running server. If you have problems with the remote site, run 'heroku logs'

******************************* 3.2: Static Pages *****************************

In this section, we will create a set of rails actions and views containing only static HTML. Rails actions are found in the controller, so we will be working mainly in the app/views and app/controllers directories.

Anytime we are working on a project, it's a good idea to do our work on a separate topic branch, so do so with:

`git checkout -b static-pages`

-------------------------- 3.2.1: Generated Static Pages --------------------

To get started, we will generate a StaticPages controller with home and help acations using this command:

`rails generate controller StaticPages home help`

***NOTE*** could also use:
`rails g controller StaticPages home help`

Since we are using Git and a remote repo for version control, it's a good idea to commit our work to the local and remote repository before moving on:

`git add .`
`git commit`

# This command pushes the static-pages topic branch up to GitHub. Subsequent pushes can just be written as : `git push`
`git push -u origin static-pages`

We passed the controller name in CamelCase, but it creates a controller file in snake_case: StaticPages becomes static_pages_controller.rb. This is convention, you could pass snake_case to the controller and be fine.

If you mess up when using the `rails generate` command, you can undo the action using the `rails destroy` command. These two commands cancel each other out:

`rails generate controller StaticPages home help`
`rails destroy controller StaticPages home help`

The `rails generate controller` command issued earlier automatically edits the routes file (config/routes.rb) to correspond to the home and help actions we created along with the controller with the lines:

get 'static_pages/home'
get 'static_pages/help'

The routes file defines the correspondence between URL's and the web pages they render, so the rule:

get 'static_pages/home'

Will map any GET request to the URL static_pages/home to the home action in the StaticPages controller.

In HTTP, there are 4 fundamental request types:

GET: To read a piece of data from the web
POST: Used for creating data on the server (form submits)
PATCH: Update a resource on the server
DELETE: Destroy a resource on the server

Web browsers are only capable of sending GET and POST requests, but rails has ways to mimic PATCH and DELETE requests. Taken together, these 4 request types are all you need to implment REST architecture, which is what Rails is based on.

If we look at the static_pages_controller.rb file, we see the following line first:

class StaticPagesController < ApplicationController

This tells us that StaticPagesController is a Ruby class, and that it inherits (<) from the class ApplicationController. This means that even though the two methods (actions in Rails) of this class are empty, we get a fair amount of functionality inherited from the ApplicationController in them.

In Rails, this method of the StaticPagesController:

def home
end

will be called when we visit the /static_pages/home URL and any code in 'home' will be run, then Rails will render the view associated with the home action found in app/views/static_pages/home.html.erb.

------------------------ 3.2.2: Custom Static Pages ---------------------------

Rails views can contain static HTML, so let's customize the HTML in the home and help views.

******************** 3.3: Getting Started with Testing ***********************

Now that we have Home and Help pages, we can add an About page. When adding a new feature to our app, it is a good idea to incorporate automated testing to ensure that the changes are implemented correctly and don't break the application in any way. When you are always developing tests for each new feature, you will end up with a test suite that serves as a saftey net and somewhat docuemtns the source code. Tests can eventually lead to faster development time, since writing good tests should help weed out or at least pinpoint bugs as the development process drags on.

There is debate over the use of Test Driven Development (TDD), which is a testing paridigm where you write the failing test first, and then write the application code to get the test to pass.

Understanding why to test is important. Hartl discusses three main benefits to testing:

1. Tests prevent against regressions, where a functioning feature stops working for some reason
2. Tests allow for code to be refactored with greater confidence.
3. Tests act as a client for the application code, helping to determine the codes design and interface with other parts of the system.

Here are some suggested guidelines on when to test first (or test at all):

- When a test is short compared to the app code it tests, write the test first
- When the desired behavior isn't clear, write the app code first, then write tests to codify the result
- Write tests of the security model first, since security should be a top priority
- When you find a bug, write a test to reproduce it, then write the app code to fix it
- Don't write tests for code that is likely to change a lot in the future (like HTML)
- Write tests before refactoring, and focusing on testing error-prone code that is especially likely to break first.

In practice, we will probably write testing code for the controller and model first, moving on to integration (testing across controller, model, view) testing later. Integration tests are the most powerful testing technique, as they can mimic how a user will interact with the application through a browser.

----------------------- 3.3.1: Our First Test -----------------------------

Rails generates controller tests when you run `rails generate controller` so we have tests for our home and help actions in test/controllers/static_pages_controller_test.rb. Here is the test for the home action of the static pages controller:

test "should get home" do
  get static_pages_home_url
  assert_response :success
end

The above test says: "Let's get the Home page by issuing a GET request and then ensure that we recive a success (200) code in response."

To ensure that our tests our passing thus far, run:

`rails test`

---------------------------- 3.3.2: Red --------------------------------------

TDD involves writing a failing test first (red), writing the app code to get it to pass (green), and then refactoring the app code if neccessary. Since we want to add an about page, the code to test whether this page is working correctly will look very similar to the code for testing the home and help pages:

test "should get about" do
  get static_pages_about_url
  assert_response :success
end

If we run the test suite with:

`rails test`

It should fail (with error messages) and that is what we want

------------------------- 3.3.3: Green ---------------------------------------

Now that we have a failing test, we will use the failing tests error messages to guide us to a working about page. The first error message is:

NameError: undefined local variable or method `static_pages_about_url'

This tells us we don't have a URL helper for static_pages_about_url, so to create one we need to add a line to the routes file:

get 'static_pages/about'

That line will ensure that GET requests to /static_pages/about will be routed to the StaticPagesController's about action and will create URL and PATH helpers called: static_pages_about_url and static_pages_about_path.

After adding the route to the routes file, we get a new error on running `rails test`:

AbstractController::ActionNotFound: The action 'about' could not be found for StaticPagesController

Again, the error tells us what we need to do, create an 'about' action in the StaticPagesController:

def about
end

Running `rails test` again, we get another error:

ActionController::UnknownFormat: StaticPagesController#about is missing a template for this request format and variant.

This is telling us that there is no template for the #about action, which means we need a view at app/views/static_pages/about.html.erb:

`touch app/views/static_pages/about.html.erb`

We can fill in the view with the code provided on the tutorial, but the test will pass now that the view is present.

# ************************* 3.4: Slightly Dynamic Pages ********************* #

In this section, we will add a title to each page that changes depending on the page we are on, making our static pages slightly dynamic. The browser will display the title tag at the top of the webpage, and this is also important for SEO. We will use the Red, Green, Refactor cycle, first writing failing tests (red), then adding title tags to all three pages (green), and finally using a layout file to eliminate dupliaction (refactor).

# ---------------------- 3.4.1: Testing Titles (Red) ------------------------ #

Titles for webpages appear in the 'head' section of the html document and inside a <title> tag. In order to test for the presence of the <title> tag and to verify it contains the right content, we need to add the following line to each of our tests:

assert select "title", "[PageName] | Ruby on Rails Tutorial Sample App"

Where [PageName] will be Home, About, and Help depending on which page we are on. The assert_select method checks that the html document contains the given selector (title in our case), and that the content of that selector is the content that appears as the second parameter.

When we run the tests (`rails test`) they should fail, which is what we expect as this is the RED section of our TDD.

# ------------------- 3.4.2: Adding Page Titles (Green) -------------------- #

In this section, we apply the basic HTML structure to each page and add the appropriate <title> tag to reflect which page we are on.

After adding the html structure and <title> tags, all tests will be green

Exercises:

1. There is some repetition in the static_pages_controller_test.rb file, where we are always testing that the second part of the title "Ruby on Rails Tutorial Sample App" is present. Using the 'setup' method and string interpolation, we can refactor these tests to use an instance variable that holds the second half of the title to make the tests more DRY.

assert_select "title", "Home | Ruby on Rails Tutorial Sample App"

becomes

def setup
  @base_title = "Ruby on Rails Tutorial Sample App"
end

assert_select "title", "Home | #{@base_title}"

The 'setup' method will be run before each test, so we will have access to the instance variable @base_title in all of our tests.

# ************* 3.4.3: Layouts and Embedded Ruby (Refactor) ***************** #

Right now, our views are purely static HTMl and suffer from a lot of duplication. We will use a layout file and some embedded Ruby to accomplish this goal.

Since the pattern for the titles is the same on each page, we can create a variable to hold the page title using the 'provide' function and then insert the variable into the HTML document with the 'yield' function.

<% provide(:title, "Home") %>
<html>
  <head>
  <title><%= yield(:title) %> | Ruby on Rails Tutorial App</title>

Since these are Ruby functions, they are executed in the HTML document using embedded Ruby. The <%  %> just executes the Ruby code inside while <%=  %> executes the code and inserts the result into the document.

Running 'rails test' will show that the tests still pass, so we can replace all of the hard-coded titles with the 'provide' then 'yield' pattern shown above.

Now, all of our pages have a very similar structure in the <head> of the document, and the only part that is different is the <body>. Rails comes with a special file located at app/views/layouts/application.html.erb which allows us to elminate the duplication between page layouts even further.

In the application layout file, we replace the <title> tag with the <title> tag from the views that uses the 'yield' function. The <body> of the application layout file simply contains:

<body>
<%= yield %>
</body>

Which will insert the contents of whatever view page we are on into the body of the document.

With this change in place, we can now remove the surrounding <html>, <head>, and <body> tags from our views and simply leave the call to 'provide' as the first line of each page, along with the body content.

Exercises:

1. Make a 'Contact'page for the app. First write tests, then get the tests to pass by writing the correct application code.

  - First write the test to get the static_pages_contact_url, this will fail which means you need to add to following to the routes file:
    get 'static_pages/contact'
  - Next, the test will fail because there is no contact action in the static_pages_controller, so add a contact action:
    def contact
    end
  - Next, the test will fail because there is no associated view with the Contact page, so copy the HTML code from the tutorial and insert into a file call app/views/static_pages/contact.html.erb
  - Now the tests should pass, so add another test to assert that the <title> tag is present and contains the correct text. This will fail, so you should add the 'provide' call at the top of the contact view:
    <% provide(:title, "Contact") %>

# ------------------ 3.4.4: Setting the Root Route ----------------------- #

Now that we have a few static pages, we can set the root route to point to the 'home' page and remove the 'hello' action and route:

root 'static_pages#hello'

Exercises:

1. Adding the root route gives us a helper 'root_url' which we can use to test whether the code we have added is working correctly:

test "should get root" do
  get root_url
  assert_response :success
end

2. Since we already had the root route defined, the test above should pass. Comment out the root route and run the test again to see it fail, the uncomment and run again to see it pass.

