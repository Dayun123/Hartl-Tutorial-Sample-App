In Chapter 3, we begin making the sample app by making static pages in our rails app.

******************** 3.1: Sample App Setup ************************ #

To start a new rails project, and make sure it conforms to the same version of rails as the tutorial, we enter this command:

`rails _5.1.4_ new sample_app`

Once the application has been created, we edit the Gemfile to match up with the tutorial and then run:

`bundle install --without production`
***NOTE*** I get an error message and have to run bundle update, which has the same effect.

The --without production flag ensures that we don't download the gems in the production group, which at this point comprises the gem for setting up the PostgreSQL database, which we will not be using for development but will be using for production. Later on, I should learn how to setup PostgreSQL on my development machine so that the development box matches the remote box.

Newer versions of rails automatically make the new project a git repository, so make sure to commit often and push up to a remote repo.

Having a good README file should be part of every project, for this app one is provided with the tutorial.

Even though there is nothing to the project at this point, it is a good idea to also deploy to Heroku as often as possible, so setup a simple "Hello, World" in the application controller and point the root route to it and then create and deploy to heroku. Make sure to visit the site locally and on the web to ensure everything is working correctly.

# create the project in heroku
`heroku create`

# push to herkou
`git push heroku master`

# open the page in a browser
`heroku open`

If you have a problem reaching pages on the site locally, you can always check the locally running server. If you have problems with the remote site, run 'heroku logs'

******************************* 3.2: Static Pages *****************************

In this section, we will create a set of rails actions and views containing only static HTML. Rails actions are found in the controller, so we will be working mainly in the app/views and app/controllers directories.

Anytime we are working on a project, it's a good idea to do our work on a separate topic branch, so do so with:

`git checkout -b static-pages`

-------------------------- 3.2.1: Generated Static Pages --------------------

To get started, we will generate a StaticPages controller with home and help acations using this command:

`rails generate controller StaticPages home help`

***NOTE*** could also use:
`rails g controller StaticPages home help`

Since we are using Git and a remote repo for version control, it's a good idea to commit our work to the local and remote repository before moving on:

`git add .`
`git commit`

# This command pushes the static-pages topic branch up to GitHub. Subsequent pushes can just be written as : `git push`
`git push -u origin static-pages`

We passed the controller name in CamelCase, but it creates a controller file in snake_case: StaticPages becomes static_pages_controller.rb. This is convention, you could pass snake_case to the controller and be fine.

If you mess up when using the `rails generate` command, you can undo the action using the `rails destroy` command. These two commands cancel each other out:

`rails generate controller StaticPages home help`
`rails destroy controller StaticPages home help`

The `rails generate controller` command issued earlier automatically edits the routes file (config/routes.rb) to correspond to the home and help actions we created along with the controller with the lines:

get 'static_pages/home'
get 'static_pages/help'

The routes file defines the correspondence between URL's and the web pages they render, so the rule:

get 'static_pages/home'

Will map any GET request to the URL static_pages/home to the home action in the StaticPages controller.

In HTTP, there are 4 fundamental request types:

GET: To read a piece of data from the web
POST: Used for creating data on the server (form submits)
PATCH: Update a resource on the server
DELETE: Destroy a resource on the server

Web browsers are only capable of sending GET and POST requests, but rails has ways to mimic PATCH and DELETE requests. Taken together, these 4 request types are all you need to implment REST architecture, which is what Rails is based on.

If we look at the static_pages_controller.rb file, we see the following line first:

class StaticPagesController < ApplicationController

This tells us that StaticPagesController is a Ruby class, and that it inherits (<) from the class ApplicationController. This means that even though the two methods (actions in Rails) of this class are empty, we get a fair amount of functionality inherited from the ApplicationController in them.

In Rails, this method of the StaticPagesController:

def home
end

will be called when we visit the /static_pages/home URL and any code in 'home' will be run, then Rails will render the view associated with the home action found in app/views/static_pages/home.html.erb.

------------------------ 3.2.2: Custom Static Pages ---------------------------

Rails views can contain static HTML, so let's customize the HTML in the home and help views.

******************** 3.3: Getting Started with Testing ***********************

Now that we have Home and Help pages, we can add an About page. When adding a new feature to our app, it is a good idea to incorporate automated testing to ensure that the changes are implemented correctly and don't break the application in any way. When you are always developing tests for each new feature, you will end up with a test suite that serves as a saftey net and somewhat docuemtns the source code. Tests can eventually lead to faster development time, since writing good tests should help weed out or at least pinpoint bugs as the development process drags on.

There is debate over the use of Test Driven Development (TDD), which is a testing paridigm where you write the failing test first, and then write the application code to get the test to pass.

Understanding why to test is important. Hartl discusses three main benefits to testing:

1. Tests prevent against regressions, where a functioning feature stops working for some reason
2. Tests allow for code to be refactored with greater confidence.
3. Tests act as a client for the application code, helping to determine the codes design and interface with other parts of the system.

Here are some suggested guidelines on when to test first (or test at all):

- When a test is short compared to the app code it tests, write the test first
- When the desired behavior isn't clear, write the app code first, then write tests to codify the result
- Write tests of the security model first, since security should be a top priority
- When you find a bug, write a test to reproduce it, then write the app code to fix it
- Don't write tests for code that is likely to change a lot in the future (like HTML)
- Write tests before refactoring, and focusing on testing error-prone code that is especially likely to break first.

In practice, we will probably write testing code for the controller and model first, moving on to integration (testing across controller, model, view) testing later. Integration tests are the most powerful testing technique, as they can mimic how a user will interact with the application through a browser.

